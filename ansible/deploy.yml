---
- hosts: servers
  vars_files:
    - vars.yml
  gather_facts: false
  become: yes

  tasks:
    - name: Clone/pull project repo
      git: repo={{ project_repo }} dest={{ install_root }}/{{ project_name }} accept_hostkey=yes
      notify:
      - restart gunicorn

    - name: install python packages
      pip: requirements={{ install_root }}/{{ project_name }}/requirements.txt
      notify:
      - restart supervisor

    - name: copy nginx config
      template: src=files/nginx.j2 dest=/etc/nginx/sites-enabled/{{ project_name }}.conf
      notify:
      - restart nginx

    - name: django collectstatic
      django_manage: command=collectstatic app_path={{ install_root }}/{{ project_name }} pythonpath={{ install_root }}/{{ project_name }}

    - name: copy supervisor config
      template: src=files/supervisord.j2 dest=/etc/supervisor/supervisord.conf
      notify:
      - restart supervisor
      
    - name: Creates gunicorn config directory
      file: path=/etc/gunicorn.d/ state=directory
      
    - name: copy gunicorn config
      template: src=files/gunicorn.j2 dest=/etc/gunicorn.d/django_python_wsgi_0.py
      notify:
      - restart supervisor
      
    - name: fix directory permissions
      command: find {{ install_root }}/{{ project_name }} -type d -exec chmod 0755 {} \;
      
    - name: fix file permissions
      command: find {{ install_root }}/{{ project_name }} -type f -exec chmod 0644 {} \;
      
    - name: fix files ownership
      command: chown -R www-data:www-data {{ install_root }}/{{ project_name }}

    - name: make sure nginx server is running
      service: name=nginx state=started enabled=yes

    - name: make sure supervisor server is running
      service: name=supervisor state=started enabled=yes

  handlers: 
    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart supervisor
      service: name=supervisor state=restarted
# vim:ft=ansible:
